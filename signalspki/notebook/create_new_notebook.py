#####
# Author: Manuel Galli
# e-mail: gmanuel89@gmail.com / manuel.galli@perkinelmer.com
# Updated date: 2022-11-30
#####

# Import libraries and functions
import requests
import json

#TODO set automatic mandatory parameters for notebook creation
# Create a Notebook in Signals Notebook
def create_new_notebook(notebook_name: str, tenant_url: str, tenant_api_key: str) -> str:
    # Initialise output
    new_notebook_eid = None
    # Fix tenant URL
    if tenant_url.endswith('/'):
        pass
    else:
        tenant_url = tenant_url + '/'
    # Formulate the payload JSON
    payload_for_post_request = {}
    payload_for_post_request['data'] = {}
    payload_for_post_request['data']['type'] = 'journal'
    payload_for_post_request['data']['attributes'] = {
        'name': str(notebook_name)}
    # Call the tenant API to create notebook
    try:
        tenant_post_response = requests.post(tenant_url + 'api/rest/v1.0/entities?force=true',
                                             headers={
                                                 'x-api-key': tenant_api_key},
                                             data=json.dumps(
                                                 payload_for_post_request)
                                             )
        # If the notebook name is auto-generated by settigs, this creation will fail, therefore we use the Description as the notebook name
        if tenant_post_response.ok:
            tenant_post_response_content = tenant_post_response.json()
        else:
            payload_for_post_request['data']['attributes'] = {
                'description': str(notebook_name)}
            tenant_post_response = requests.post(tenant_url + 'api/rest/v1.0/entities?force=true',
                                                 headers={
                                                     'x-api-key': tenant_api_key},
                                                 data=json.dumps(
                                                     payload_for_post_request)
                                                 )
            tenant_post_response_content = tenant_post_response.json()
        # Retrieve the ID of the new notebook created
        new_notebook_eid = tenant_post_response_content.get('data').get('id')
    except:
        print('Cannot POST content to tenant %s' % (tenant_url))
        print('Payload: ' + json.dumps(payload_for_post_request))
        pass
    # return
    return new_notebook_eid


"""
{
  "data": {
    "type": "journal",
    "attributes": {
      "name": "New notebook"
    }
  }
}
"""
